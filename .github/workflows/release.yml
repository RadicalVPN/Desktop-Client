name: Release Build

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build_release_windows:
    runs-on: windows-latest
    name: Build Windows
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go 1.21
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
          cache-dependency-path: |
            radicalvpnd/go.sum

      - name: Setup Node.JS 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Build App
        run: |
          build\windows\build-windows.bat

      - name: Rename Artifact
        working-directory: build/windows/bin/
        run: |
          ren RadicalVPN-Setup.exe radicalvpn-win-${{ runner.arch }}.exe

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_windows
          path: build/windows/bin/radicalvpn-win-*.exe

  build_release_macos:
    strategy:
      matrix:
        os: [self-hosted, macos-latest]
    runs-on: ${{ matrix.os }}
    name: Build MacOS
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go 1.21
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"
          cache-dependency-path: |
            radicalvpnd/go.sum

      - name: Setup Node.JS 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Install build dependencies
        run: brew install autoconf automake libtool

      - name: Install the Apple Developer Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_DEVELOPER_ID_CERT }}
          P12_PASSWORD: ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASSWD }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secret
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Build App
        env:
          TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
        run: |
          chmod +x ./build/darwin/build.sh
          ./build/darwin/build.sh -c $TEAM_ID -v ${{github.ref_name }}

      - name: Rename Artifact
        working-directory: build/darwin/_compiled/
        run: |
          mv RadicalVPN.dmg radicalvpn-darwin-${{ runner.arch }}.dmg

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_darwin-${{ runner.arch }}
          path: build/darwin/_compiled/radicalvpn-darwin-*.dmg

  prepare_release:
    runs-on: ubuntu-latest
    name: Prepare Release
    outputs:
      full_sha: ${{ steps.var.outputs.full_sha }}
    needs: [build_release_windows, build_release_macos]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Commit Hash
        id: var
        run: |
          echo "full_sha=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  publish_release:
    runs-on: ubuntu-latest
    name: Publish Release
    needs: [prepare_release]
    steps:
      - name: Download all workflow artifacts
        uses: actions/download-artifact@v4

      - name: Copy artifacts
        run: |
          cp -r build_*/* .
          rm -rf build_*

      - name: Get artifact checksums
        id: get_artifact_checksums
        run: |
          echo "artifact_checksums<<EOF" >> $GITHUB_OUTPUT
          sha256sum * >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Write artifact checksums to file
        run: |
          echo "${{ steps.get_artifact_checksums.outputs.artifact_checksums }}" > checksums.txt

      - name: Release Version ${{github.ref_name }}
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          draft: true
          files: |
            *
